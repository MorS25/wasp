import sys
import string

def print_header(name, generatedfrom=None, generatedby=None, outfile=sys.stdout):
    if generatedfrom:
        print >> outfile, "/* This outfile has been generated from %s */" % generatedfrom
    if generatedby:
        print >> outfile, "/* This outfile has been generated by %s */" % generatedby
    print >> outfile, "/* Please DO NOT EDIT */"
    print >> outfile
    print >> outfile, "#ifndef ", name
    print >> outfile, "#define ", name

def print_footer(name, outfile=sys.stdout):
    print >> outfile, "\n#endif /* %s */" % name

def define_string(name, val, maxwidth=0, outfile=sys.stdout):
    val = val.strip()
    #take one off the maxwidth
    maxwidth -= 1
    if maxwidth and len(val) != maxwidth:
        val = val.ljust(maxwidth)[0:maxwidth]
    print >> outfile, '#define %s "%s"' % (name.upper(), val)

def define_int(name, val, outfile=sys.stdout):
    print >> outfile, "#define %s %d" % (name.upper(), val)

class RSTHelper:
    # Utility mixin class for writing restructured text

    HEADING_LEVELS = ('=','-','^','"')

    def rst_write_comment(self, outfile, txt):
        print >> outfile, ".. %s" % txt

    def rst_write_list(self, outfile, txt, level=1, style="*"):
        print >> outfile, "%s%s %s" % (" "*(2*level - 1),style,txt)

    def rst_write_header(self, name, outfile, level=0):
        print >> outfile, name
        print >> outfile, self.HEADING_LEVELS[level]*len(name)

    def rst_write_table(self, outfile, title, contents_title, contents, indent=None):

        assert len(contents) > 0
        assert len(contents[0]) == 2
        assert len(contents_title) == 2

        #find the longest string in the table
        max_contents = max(map(lambda x: max(len(x[0]),len(x[1])),contents))
        max_contents_title = max(len(contents_title[0]),len(contents_title[1]))

        TABLE_COL_W = max(25, max_contents, max_contents_title) + 1
        TABLE_GAP_W  = 1
        TABLE_HEADER = '='*TABLE_COL_W

        def _print_field(name, _type, center=False, gap=" "):
            if center:
                f = string.center
            else:
                f = string.ljust

            if indent:
                print >> outfile, indent,
            print >> outfile, "%s%s%s" % (
                                    f(name, TABLE_COL_W),
                                    gap*TABLE_GAP_W,
                                    f(_type, TABLE_COL_W))

        def _print_header():
            _print_field(TABLE_HEADER, TABLE_HEADER, center=True)

        def _print_title(name):
            title_w = 2*TABLE_COL_W + TABLE_GAP_W
            title_ul = "-"*TABLE_COL_W

            if indent:
                print >> outfile, indent,
            print >> outfile, string.center(name, title_w)
            _print_field(title_ul, title_ul, gap="-")

        _print_header()
        if title:
            _print_title(title)
        _print_field(contents_title[0],contents_title[1], center=True)
        _print_header()

        for n,t in contents:
            _print_field(n, t)

        _print_header()
